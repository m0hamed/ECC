import itertools

class BasicLinearCode:
  # generator_matrix is of type sage matrix in a certain field
  def __init__(self, generator_matrix):
    self._generator_matrix = generator_matrix
    # this is the field of the matrix
    self._base_ring = generator_matrix.base_ring()

  # return generator matrix
  def generator_matrix(self):
    return self._generator_matrix

  # simple encode by multiplying with the generator matrix.
  # Assumes msg is a vector in the same base field
  def encode(self, msg):
    return msg*self._generator_matrix

  # uses the reduced form of the generator matrix to encode
  # Assumes msg is a vector in the same base field
  def encode_systematic(self, msg):
    return msg*self._generator_matrix.echelon_form()

  # returns the first 1 in each row of the reduced form of the generator matrix.
  # This basically corresponds to the indicies in the code word that are the same as the message
  def systematic_positions(self):
    positions = []
    for row in self._generator_matrix.echelon_form():
      positions.append(list(row).index(1))
    return positions

  # just retrieves the parts of the code word corresponding to the systematic indicies
  def unencode_systematic(self, codeword):
    return vector(self._base_ring, map(codeword.get, self.systematic_positions()))

  # returns a list of all possible code words by generating a list of all possible messages and encoding them
  def codewords(self):
    codewords = []
    # messages are generated by the cartesian product of the set possible elements of the base field n times
    # where n is the dimension of the code (the number of rows in the generator matrix / the size of the messages).
    for msg in itertools.product(*[self._base_ring.list() for _ in xrange(self._generator_matrix.nrows())]):
      codewords.append(self.encode(vector(self._base_ring, msg)))
    return codewords

  # returns the minimum hamming weight of all the codewords except the 0 one.
  def minimum_distance(self):
    return min([codeword.hamming_weight() for codeword in self.codewords() if codeword.hamming_weight() > 0])

  # the parity check matrix is basically the right kernel of the generator matrix
  def parity_check_matrix(self):
    return self._generator_matrix.right_kernel()
